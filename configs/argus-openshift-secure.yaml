---
apiVersion: project.openshift.io/v1
kind: Project
metadata:
  annotations:
    openshift.io/display-name: "Argus"
    openshift.io/description: "File Integrity Monitoring for Kubernetes"
  name: argus
spec:
  finalizers:
  - openshift.io/origin
  - kubernetes
---
apiVersion: v1
kind: RoleBinding
metadata:
  name: admins
  namespace: argus
roleRef:
  name: admin
subjects:
- kind: User
  name: argus-admin
userNames:
- argus-admin
---
apiVersion: v1
kind: RoleBinding
metadata:
  name: system:image-pullers
  namespace: argus
groupNames:
- system:serviceaccounts:argus
roleRef:
  name: system:image-puller
subjects:
- kind: SystemGroup
  name: system:serviceaccounts:argus
---
apiVersion: v1
kind: RoleBinding
metadata:
  name: system:image-builders
  namespace: argus
roleRef:
  name: system:image-builder
subjects:
- kind: ServiceAccount
  name: builder
userNames:
- system:serviceaccount:argus:builder
---
apiVersion: v1
kind: RoleBinding
metadata:
  name: system:deployers
  namespace: argus
roleRef:
  name: system:deployer
subjects:
- kind: ServiceAccount
  name: deployer
userNames:
- system:serviceaccount:argus:deployer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argus-admin
  namespace: argus
---
apiVersion: authorization.openshift.io/v1
kind: ClusterRoleBinding
metadata:
  name: argus-admin
roleRef:
  apiGroup: authorization.openshift.io/v1
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: argus-admin
  namespace: argus
---
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: argus
allowHostDirVolumePlugin: true
allowHostPID: true
allowPrivilegedContainer: true
allowedCapabilities:
- '*'
fsGroup:
  type: RunAsAny
readOnlyRootFilesystem: false
requiredDropCapabilities: null
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
seccompProfiles:
- '*'
supplementalGroups:
  type: RunAsAny
users:
- system:serviceaccount:argus:argus-admin
volumes:
- '*'
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: arguswatchers.arguscontroller.clustergarage.io
spec:
  group: arguscontroller.clustergarage.io
  version: v1alpha1
  scope: Namespaced
  names:
    kind: ArgusWatcher
    singular: arguswatcher
    plural: arguswatchers
    shortNames:
    - aw
    categories:
    - all
  subresources:
    status: {}
  additionalPrinterColumns:
  - name: Observable
    type: integer
    description: Number of pods that can be watched
    JSONPath: .status.observablePods
  - name: Watched
    type: integer
    description: Number of pods currently being watched
    JSONPath: .status.watchedPods
---
apiVersion: v1
kind: ImageStream
metadata:
  labels:
    controller: arguscontroller
  name: argus-controller
  namespace: argus
spec:
  tags:
  - name: v0.3.0
    from:
      kind: DockerImage
      name: clustergarage/argus-controller:v0.3.0
  - name: latest
    from:
      kind: DockerImage
      name: clustergarage/argus-controller:latest
---
apiVersion: v1
kind: DeploymentConfig
metadata:
  name: arguscontroller
  namespace: argus
  labels:
    controller: arguscontroller
spec:
  replicas: 1
  selector:
    controller: arguscontroller
  template:
    metadata:
      labels:
        controller: arguscontroller
    spec:
      containers:
      - name: arguscontroller
        image: clustergarage/argus-controller:v0.3.0
        command: [
          "/arguscontroller",
          "-tls-ca-file", "/usr/lib/ssl/certs/ca.pem",
          "-tls-cert-file", "/usr/lib/ssl/certs/cert.pem",
          "-tls-key-file", "/usr/lib/ssl/certs/key.pem",
          "-tls-server-name", "localhost"
        ]
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr", ":5000"]
          initialDelaySeconds: 10
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr", ":5000"]
          initialDelaySeconds: 5
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: argus-config-volume
          mountPath: /usr/lib/ssl/certs
          readOnly: true
      serviceAccountName: argus-admin
      volumes:
      - name: argus-config-volume
        configMap:
          name: argus-config
  triggers:
  - type: ConfigChange
  - type: ImageChange
    imageChangeParams:
      automatic: true
      containerNames:
      - arguscontroller
      from:
        kind: ImageStreamTag
        name: argus-controller:v0.3.0
  strategy:
    type: Rolling
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: argusd
  namespace: argus
  labels:
    daemon: argusd
spec:
  selector:
    matchLabels:
      daemon: argusd
  template:
    metadata:
      labels:
        daemon: argusd
    spec:
      containers:
      - name: argusd
        image: clustergarage/argusd:v0.3.0
        command: [
          "/argusd",
          "-tlscafile", "/usr/lib/ssl/certs/ca.pem",
          "-tlscertfile", "/usr/lib/ssl/certs/cert.pem",
          "-tlskeyfile", "/usr/lib/ssl/certs/key.pem"
        ]
        ports:
        - name: grpc
          containerPort: 50051
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr", ":50051"]
          initialDelaySeconds: 10
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-addr", ":50051"]
          initialDelaySeconds: 5
        volumeMounts:
        - name: argus-config-volume
          mountPath: /usr/lib/ssl/certs
          readOnly: true
        - name: dockerpid
          mountPath: /var/run/docker.pid
        - name: dockersock
          mountPath: /var/run/docker.sock
        - name: sysfscgroup
          mountPath: /sys/fs/cgroup
        securityContext:
          privileged: true
        resources:
          limits:
            cpu: 500m
            memory: 200Mi
          requests:
            cpu: 500m
            memory: 200Mi
      hostPID: true
      qosClass: Guaranteed
      serviceAccountName: argus-admin
      volumes:
      - name: argus-config-volume
        configMap:
          name: argus-config
      - name: dockerpid
        hostPath:
          path: /var/run/docker.pid
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      - name: sysfscgroup
        hostPath:
          path: /sys/fs/cgroup
---
apiVersion: v1
kind: Service
metadata:
  name: argusd-svc
  namespace: argus
spec:
  selector:
    daemon: argusd
  clusterIP: None
  ports:
  - name: grpc
    protocol: TCP
    port: 50051
    targetPort: grpc
